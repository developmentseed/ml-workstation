{
 "Resources": {
  "vpcA2121C38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/Resource"
   }
  },
  "vpcPublicSubnet1Subnet2E65531E": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/Subnet"
   }
  },
  "vpcPublicSubnet1RouteTable48A2DF9B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/RouteTable"
   }
  },
  "vpcPublicSubnet1RouteTableAssociation5D3F4579": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPublicSubnet1RouteTable48A2DF9B"
    },
    "SubnetId": {
     "Ref": "vpcPublicSubnet1Subnet2E65531E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "vpcPublicSubnet1DefaultRoute10708846": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPublicSubnet1RouteTable48A2DF9B"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "vpcIGWE57CBDCA"
    }
   },
   "DependsOn": [
    "vpcVPCGW7984C166"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/DefaultRoute"
   }
  },
  "vpcPublicSubnet1EIPDA49DCBE": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/EIP"
   }
  },
  "vpcPublicSubnet1NATGateway9C16659E": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "SubnetId": {
     "Ref": "vpcPublicSubnet1Subnet2E65531E"
    },
    "AllocationId": {
     "Fn::GetAtt": [
      "vpcPublicSubnet1EIPDA49DCBE",
      "AllocationId"
     ]
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "DependsOn": [
    "vpcPublicSubnet1DefaultRoute10708846",
    "vpcPublicSubnet1RouteTableAssociation5D3F4579"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet1/NATGateway"
   }
  },
  "vpcPublicSubnet2Subnet009B674F": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet2"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet2/Subnet"
   }
  },
  "vpcPublicSubnet2RouteTableEB40D4CB": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PublicSubnet2"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet2/RouteTable"
   }
  },
  "vpcPublicSubnet2RouteTableAssociation21F81B59": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPublicSubnet2RouteTableEB40D4CB"
    },
    "SubnetId": {
     "Ref": "vpcPublicSubnet2Subnet009B674F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "vpcPublicSubnet2DefaultRouteA1EC0F60": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPublicSubnet2RouteTableEB40D4CB"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "vpcIGWE57CBDCA"
    }
   },
   "DependsOn": [
    "vpcVPCGW7984C166"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PublicSubnet2/DefaultRoute"
   }
  },
  "vpcPrivateSubnet1Subnet934893E8": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PrivateSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet1/Subnet"
   }
  },
  "vpcPrivateSubnet1RouteTableB41A48CC": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PrivateSubnet1"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet1/RouteTable"
   }
  },
  "vpcPrivateSubnet1RouteTableAssociation67945127": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPrivateSubnet1RouteTableB41A48CC"
    },
    "SubnetId": {
     "Ref": "vpcPrivateSubnet1Subnet934893E8"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "vpcPrivateSubnet1DefaultRoute1AA8E2E5": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPrivateSubnet1RouteTableB41A48CC"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "vpcPublicSubnet1NATGateway9C16659E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet1/DefaultRoute"
   }
  },
  "vpcPrivateSubnet2Subnet7031C2BA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PrivateSubnet2"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet2/Subnet"
   }
  },
  "vpcPrivateSubnet2RouteTable7280F23E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc/PrivateSubnet2"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet2/RouteTable"
   }
  },
  "vpcPrivateSubnet2RouteTableAssociation007E94D3": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPrivateSubnet2RouteTable7280F23E"
    },
    "SubnetId": {
     "Ref": "vpcPrivateSubnet2Subnet7031C2BA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "vpcPrivateSubnet2DefaultRouteB0E07F99": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "vpcPrivateSubnet2RouteTable7280F23E"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "vpcPublicSubnet1NATGateway9C16659E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/PrivateSubnet2/DefaultRoute"
   }
  },
  "vpcIGWE57CBDCA": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/vpc"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/IGW"
   }
  },
  "vpcVPCGW7984C166": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "vpcA2121C38"
    },
    "InternetGatewayId": {
     "Ref": "vpcIGWE57CBDCA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/vpc/VPCGW"
   }
  },
  "taskdenfinitionTaskRoleE6640D4B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/task-denfinition/TaskRole/Resource"
   }
  },
  "taskdenfinition9D6CCF55": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "jupyter",
       "lab"
      ],
      "Essential": true,
      "Image": "pangeo/pytorch-notebook",
      "MemoryReservation": 4000,
      "Name": "container",
      "PortMappings": [
       {
        "ContainerPort": 8080,
        "HostPort": 8080,
        "Protocol": "tcp"
       },
       {
        "ContainerPort": 22,
        "HostPort": 22,
        "Protocol": "tcp"
       }
      ],
      "ResourceRequirements": [
       {
        "Type": "GPU",
        "Value": "1"
       }
      ]
     }
    ],
    "Family": "MlWorkstationEcsStacktaskdenfinitionA91C13FD",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "Tags": [
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "taskdenfinitionTaskRoleE6640D4B",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/task-denfinition/Resource"
   }
  },
  "cluster611F8AFF": {
   "Type": "AWS::ECS::Cluster",
   "Properties": {
    "ClusterSettings": [
     {
      "Name": "containerInsights",
      "Value": "enabled"
     }
    ],
    "Tags": [
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityInstanceSecurityGroup6F34A811": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ],
    "VpcId": {
     "Ref": "vpcA2121C38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/InstanceSecurityGroup/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityInstanceRole600A9F71": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/InstanceRole/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityInstanceRoleDefaultPolicyC6822C0C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "cluster611F8AFF",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:GetAuthorizationToken",
        "ecs:DiscoverPollEndpoint",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterdefaultautoscalingcapacityInstanceRoleDefaultPolicyC6822C0C",
    "Roles": [
     {
      "Ref": "clusterdefaultautoscalingcapacityInstanceRole600A9F71"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityInstanceProfile225AE765": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "clusterdefaultautoscalingcapacityInstanceRole600A9F71"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/InstanceProfile"
   }
  },
  "clusterdefaultautoscalingcapacityLaunchConfigDF86DF03": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "Properties": {
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "p2.xlarge",
    "AssociatePublicIpAddress": true,
    "IamInstanceProfile": {
     "Ref": "clusterdefaultautoscalingcapacityInstanceProfile225AE765"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "clusterdefaultautoscalingcapacityInstanceSecurityGroup6F34A811",
       "GroupId"
      ]
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\necho ECS_CLUSTER=",
        {
         "Ref": "cluster611F8AFF"
        },
        " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "clusterdefaultautoscalingcapacityInstanceRoleDefaultPolicyC6822C0C",
    "clusterdefaultautoscalingcapacityInstanceRole600A9F71"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/LaunchConfig"
   }
  },
  "clusterdefaultautoscalingcapacityASGED341A04": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "1",
    "DesiredCapacity": "1",
    "LaunchConfigurationName": {
     "Ref": "clusterdefaultautoscalingcapacityLaunchConfigDF86DF03"
    },
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "PropagateAtLaunch": true,
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "PropagateAtLaunch": true,
      "Value": "prod"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "vpcPublicSubnet1Subnet2E65531E"
     },
     {
      "Ref": "vpcPublicSubnet2Subnet009B674F"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/ASG"
   }
  },
  "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRole04C58B3C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/DrainECSHook/Function/ServiceRole/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRoleDefaultPolicyB07BBBE1": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeHosts",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "clusterdefaultautoscalingcapacityASGED341A04"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks",
        "ecs:ListTasks",
        "ecs:UpdateContainerInstancesState"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "cluster611F8AFF",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRoleDefaultPolicyB07BBBE1",
    "Roles": [
     {
      "Ref": "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRole04C58B3C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityDrainECSHookFunctionDC18DE41": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRole04C58B3C",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "cluster611F8AFF"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRoleDefaultPolicyB07BBBE1",
    "clusterdefaultautoscalingcapacityDrainECSHookFunctionServiceRole04C58B3C"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/DrainECSHook/Function/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityDrainECSHookFunctionAllowInvokeMlWorkstationEcsStackclusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicE7170A0581760ABD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "clusterdefaultautoscalingcapacityDrainECSHookFunctionDC18DE41",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicF1E31028"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/DrainECSHook/Function/AllowInvoke:MlWorkstationEcsStackclusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicE7170A05"
   }
  },
  "clusterdefaultautoscalingcapacityDrainECSHookFunctionTopic369DF90E": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicF1E31028"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "clusterdefaultautoscalingcapacityDrainECSHookFunctionDC18DE41",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/DrainECSHook/Function/Topic/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicF1E31028": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/LifecycleHookDrainHook/Topic/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleF827E668": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity"
     },
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/LifecycleHookDrainHook/Role/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleDefaultPolicy41BB1A81": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicF1E31028"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleDefaultPolicy41BB1A81",
    "Roles": [
     {
      "Ref": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleF827E668"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
   }
  },
  "clusterdefaultautoscalingcapacityLifecycleHookDrainHook5485FFA6": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "clusterdefaultautoscalingcapacityASGED341A04"
    },
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "NotificationTargetARN": {
     "Ref": "clusterdefaultautoscalingcapacityLifecycleHookDrainHookTopicF1E31028"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleF827E668",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleDefaultPolicy41BB1A81",
    "clusterdefaultautoscalingcapacityLifecycleHookDrainHookRoleF827E668"
   ],
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/cluster/default-autoscaling-capacity/LifecycleHookDrainHook/Resource"
   }
  },
  "ecsserviceService49E054F7": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "cluster611F8AFF"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 100,
     "MinimumHealthyPercent": 0
    },
    "EnableECSManagedTags": false,
    "LaunchType": "EC2",
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "ENABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "ecsserviceSecurityGroupB9B0227A",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "vpcPublicSubnet1Subnet2E65531E"
       },
       {
        "Ref": "vpcPublicSubnet2Subnet009B674F"
       }
      ]
     }
    },
    "SchedulingStrategy": "DAEMON",
    "Tags": [
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ],
    "TaskDefinition": {
     "Ref": "taskdenfinition9D6CCF55"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/ecs-service/Service"
   }
  },
  "ecsserviceSecurityGroupB9B0227A": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "MlWorkstationEcsStack/ecs-service/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "project",
      "Value": "ml-workstation"
     },
     {
      "Key": "stack",
      "Value": "prod"
     }
    ],
    "VpcId": {
     "Ref": "vpcA2121C38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/ecs-service/SecurityGroup/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VSy27CMBD8lt6Nq4KEekWUUiRUWQniWm3MBrZJ7MgPUBTl3+skhKTtaWfG69Xs2HO+XPKXJ7jZmTxls5wSXscOZMaC9FWjnPP6WEq2TtVRrJnwSU4y9olC12ojirR3eIAkx1EftZW1WhI40urR3ILNTrTlE9wWHN6gYsLQNcBx8E45NAEPDb2TO1u54PVSoHIsRukNuWprtC87D1OhYSgtrzdyfgCbvWFKigY3fxWtHJBCM9Vyb4ONtnuAYVSM5kqyX7iHDSMoeB3pPoauCh0i63yPaKesAyVRGJ1SHq6Bd9pKyEmdeb0KJO7JY5s9eCUvwVtKZ28eSf5r3VOKspI5fmiddRenQsNyKJIT8Po9jBuGTLFAU5C1gTXMqhBZeAkrDZVDwy9+0CV1n6MDTcMitNqbPhMBBgq8xzY9CFuculwbJip30ep5wV/54unbEs2MV44K5FFffwBKIQkMoQIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "MlWorkstationEcsStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}